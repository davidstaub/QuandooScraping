library(devtools)
use_package("rvest")
use_package("stringr")
use_package("lubridate")
use_package("gender")
use_package("cld2")
use_r("QuandooScraping")
devtools::load_all(".")
QuandooScraping("https://www.quandoo.at/place/arravane-98759")
QuandooScraping("https://www.quandoo.nz/place/fantasy-korean-bbq-henderson-99606")
use_r("test")
print("Hello World")
devtools::load_all(".")
devtools::load_all(".")
test()
QuandooScraping("https://www.quandoo.nz/place/fantasy-korean-bbq-henderson-99606")
df= QuandooScraping("https://www.quandoo.nz/place/fantasy-korean-bbq-henderson-99606")
devtools::load_all(".")
QuandooScraping("https://www.quandoo.nz/place/fantasy-korean-bbq-henderson-99606")
devtools::load_all(".")
devtools::load_all(".")
QuandooScraping("https://www.quandoo.nz/place/fantasy-korean-bbq-henderson-99606")
devtools::load_all(".")
test()
QuandooScraping()
QuandooScraping <- function(url="https://www.quandoo.nz/place/fantasy-korean-bbq-henderson-99606"){
url = sub("(?:/speisekarte|/bilder|/bewertungen|#content).*", "", url)
url = sub("(?:/ruokalista|/kuvat|/arvostelut|#content).*", "", url) # finisch
url = sub("(?:/menu|/immagini|/recensioni|#content).*", "", url) # italienisch
url = sub("(?:/menu|/photos|/reviews|#content).*", "", url) # englisch
url = sub("(?:/menu|/gorseller|/degerlendirme|#content).*", "", url) # türkisch
url = sub("(?:/speisekarte|/bilder|/bewertungen|#content).*", "", url)
# Testen ob quandoo element von url
if(!grepl("quandoo", url)) {
cat("This function is only designed for Quandoo. Check the url.")
# Vorzeitiges Beenden der Funktion
return(NULL)
}
# Ergänzen falls vergessen
if(startsWith(url,"www.")){
url <- paste0("https://", url)
cat("url was completed with https://")
}
webpage = try(read_html(paste0(url, "/bewertungen?reviewPage=1#content")), silent = TRUE)
if(inherits(webpage, "try-error")) {
cat("Error reading the URL: ", url, "\n")
return(NULL) # Beendet die Funktion vorzeitig
}
review_containers <- html_nodes(webpage, '[data-name="shared-review"]')
if(length(review_containers)==0){
cat("The restaurant has no or less than 4 ratings. Search for a restaurant with 4 or more reviews")
return(NULL)
}
# Leere Liste, um alle Reviews zu speichern
all_descriptions <- list()
all_ratings <- list()
all_persons <- list()
# Anfangswert für die Seitenzahl setzen
page_number <- 1
# Variable, um zu überprüfen, ob es noch Seiten gibt
has_more_pages <- TRUE
while(has_more_pages) {
# Erzeugen der spezifischen URL für die aktuelle Seite
page_url <- paste0(url, "/bewertungen?reviewPage=", page_number,"#content")
# Versuch, die Webseite zu lesen
webpage <- read_html(page_url,silent=TRUE)
# Alle Review-Container auswählen
review_containers <- html_nodes(webpage, '[data-name="shared-review"]')
review_descriptions <- review_containers %>%
html_nodes('p') %>%
html_text()
review_rating<- review_containers %>%
html_nodes('[class^="ii3neg-0"]') %>%
html_text()
review_person <- review_containers %>%
html_nodes(".nm9kpb-0.iluhHB") %>%
html_text()
# Hinzufügen der extrahierten Reviews zur Gesamtliste, wenn es Reviews auf der Seite gibt
if(length(review_descriptions) > 0) {
all_descriptions[[page_number]] <- review_descriptions
all_persons[[page_number]] <- review_person
all_ratings[[page_number]] <- review_rating
page_number <- page_number + 1
} else {
# Keine Reviews gefunden, Annahme, dass es keine weiteren Seiten gibt
has_more_pages <- FALSE
}
}
# Kombinieren aller Reviews in einen einzigen Vektor
all_descriptions <- unlist(all_descriptions)
all_persons <- unlist(all_persons)
all_ratings <- unlist(all_ratings)
length(all_descriptions)
any(is.na(all_descriptions))
any(is.na(all_persons))
any(is.na(all_ratings))
#### All_persons verarbeiten ####
# Funktion, die auf jedes Listenelement angewendet wird
process_persons <- function(all_persons) {
all_persons <- gsub("a year ago", "1 year ago", all_persons)
all_persons <- gsub("a day ago", "1 day ago", all_persons)
all_persons <- gsub("a month ago", "1 month ago", all_persons)
all_persons <- gsub("an hour ago", "1 hour ago", all_persons)
all_persons <- gsub("a week ago", "1 week ago", all_persons)
# Aufteilung des Strings bei " · "
split_parts <- strsplit(all_persons, " · ")
# Definition des Suchmusters
pattern <- "\\d+\\s+(hour|hours|week|weeks|day|days|month|months|year|years) ago\\b"
# Extraktion des Datums und der Person
date <- str_extract(split_parts[[1]][1], pattern)
# Extraktion der Zahl und der Zeiteinheit aus dem String
matches <- regmatches(date, regexec("(\\d+)\\s*(hour|day|week|month|year)s? ago", date))[[1]]
# Extraktion der Zahl und Konvertierung in numerisch
anzahl <- as.numeric(matches[2])
# Extraktion der Zeiteinheit
zeiteinheit <- str_squish(matches[3])
# Aktuelles Datum
aktuelles_datum <- Sys.Date()
# Berechnung des Datums basierend auf der Zeiteinheit
if (zeiteinheit == "year") {
datum_vor_n <- aktuelles_datum %m-% years(anzahl)
} else if (zeiteinheit == "month" | zeiteinheit == "month") {
datum_vor_n <- aktuelles_datum %m-% months(anzahl)
} else if (zeiteinheit == "day" | zeiteinheit == "days") {
datum_vor_n <- aktuelles_datum %m-% days(anzahl)
} else if (zeiteinheit == "hour" | zeiteinheit == "hours"){
datum_vor_n <- aktuelles_datum %m-% hours(anzahl)
} else {
stop("Unbekannte Zeiteinheit")
}
# Formatierung des Datums, um nur Monat und Jahr anzuzeigen
formatiertes_datum <- format(datum_vor_n, "%m/%Y")
name <- str_replace_all(split_parts[[1]][1], pattern, "")
sex_object <-  gender(trimws(gsub("[a-zA-Z]\\.", "", tolower(name))),method ="napp")
sex <- sex_object$gender
if (length(sex) == 0 && is.logical(sex)){
sex <- NA
prob_male <- NA
} else {
sex = sex
prob_male <- sex_object$proportion_male
}
# Extraktion der Bewertungsanzahl
review_count <- as.numeric(gsub("[^0-9]", "", split_parts[[1]][2]))
# Rückgabe als Liste
return(list(name = name, date = formatiertes_datum, review_count = review_count,sex=sex,prob_male=prob_male))
}
# Anwendung der Funktion auf jedes Element der Liste all_persons
processed_persons <- lapply(all_persons, process_persons)
#### all_ratings verarbeiten ####
process_rating <- function(rating) {
as.numeric(str_extract(rating, "\\d+(?=/6)"))
}
processed_rating <- lapply(all_ratings, process_rating)
#### all_descriptions bearbeiten ####
process_description <- function(description) {
return(gsub("\n", " ", description))
}
processed_description <- lapply(all_descriptions, process_description)
description_language <- lapply(processed_description,detect_language)
#### Df für Rückgabe zusammensetzen ####
df_rating_description <- data.frame(rating = unlist(processed_rating),
description = unlist(processed_description),
description_lang = unlist(description_language))
df_person <- do.call(rbind, lapply(processed_persons, function(x) {
# x ist hier eine Unterliste
return(data.frame(name=x$name, review_count=x$review_count, date=x$date,sex=x$sex,prob_male=x$prob_male, stringsAsFactors=FALSE))
}))
df = cbind(df_person,df_rating_description)
return(df)
}
QuandooScraping()
devtools::load_all(".")
QuandooScraping()
rm(QuandooScraping())
rm(QuandooScraping)
QuandooScraping()
devtools::load_all(".")
QuandooScraping()
devtools::load_all(".")
QuandooScraping()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
QuandooScraping()
devtools::load_all(".")
QuandooScraping()
devtools::load_all(".")
QuandooScraping()
devtools::load_all(".")
QuandooScraping()
df = QuandooScraping()
devtools::document()
devtools::load_all(".")
QuandooScraping()
devtools::document()
devtools::document()
devtools::load_all(".")
install.packages("lubridate")
install.packages("lubridate")
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
QuandooScraping()
devtools::document()
devtools::load_all(".")
QuandooScraping()
devtools::load_all(".")
QuandooScraping()
devtools::load_all(".")
df = QuandooScraping()
View(df)
devtools::load_all(".")
df = QuandooScraping()
devtools::load_all(".")
df = QuandooScraping()
View(df)
devtools::load_all(".")
devtools::load_all(".")
test()
devtools::document()
test()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
test()
devtools::document()
devtools::load_all(".")
df = QuandooScraping()
devtools::load_all(".")
df = QuandooScraping()
devtools::load_all(".")
QuandooScraping()
View(df)
devtools::load_all(".")
QuandooScraping()
df = QuandooScraping("https://www.quandoo.co.uk/tr/place/il-cucciolo-restaurant-26054")
devtools::load_all(".")
df = QuandooScraping()
df = QuandooScraping("https://www.quandoo.co.uk/tr/place/il-cucciolo-restaurant-26054")
View(df)
devtools::load_all(".")
test("years")
test("months")
test("month")
test("days")
test("hours")
View(df)
mode(df)
type(df)
is.data.frame(df)
devtools::load_all(".")
?QuandooScraping
?gsub
?QuandooScraping
devtools::load_all(".")
QuandooScraping("https://www.quandoo.at/en/place/taeko-ramen-91507")
df = QuandooScraping("https://www.quandoo.at/en/place/taeko-ramen-91507")
View(df)
str(df)
devtools::load_all(".")
df = QuandooScraping("https://www.quandoo.at/en/place/fischerie-70242")
str(df)
View(df)
?gender
View(df)
devtools::load_all(".")
df = QuandooScraping("https://www.quandoo.at/en/place/fischerie-70242")
str(df)
View(df)
library(QuandooScraping)
QuandooScraping("https://www.quandoo.de/place/golvet-86416")
df = QuandooScraping("https://www.quandoo.de/place/golvet-86416")
View(df)
str(df)
?gsub
?QuandooScraping
devtools::load_all(".")
?QuandooScraping
head(df)
View(df)
?gender
devtools::load_all(".")
?QuandooScraping
?gsub
?QuandooScraping
?QuandooScraping
devtools::load_all(".")
review_example = QuandooScraping("https://www.quandoo.ch/en/place/yens-restaurant-11833")
View(review_example)
View(review_example)
View(review_example)
use_data(review_example)
library(devtools)
use_data(review_example)
use_r("data")
View(review_example)
devtools::load_all(".")
x = data("review_example")
x = data(review_example)
data("review_example")
rm(review_example)
data(review_example)
rm(review_example)
data("review_example")
?review_example
library(QuandooScraping)
data(review_example)
df = QuandooScraping("https://www.quandoo.co.uk/de/place/fish-central-44619")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(QuandooScraping)
?genderdata
??genderdata
use_package("genderdata")
library(devtolls)
library(devtools)
devtools::load_all(".")
library(QuandooScraping)
QuandooScraping()
??genderdata
if(T){print("Hello")}
devtools::load_all(".")
devtools::check()
devtools::load_all(".")
use_package("genderdata")
devtools::load_all(".")
?gender
?gender
devtools::load_all(".")
df = QuandooScraping()
devtools::load_all(".")
QuandooScraping()
devtools::load_all(".")
df = QuandooScraping()
devtools::load_all(".")
QuandooScraping()
devtools::load_all(".")
QuandooScraping()
devtools::load_all(".")
library(QuandooScraping)
QuandooScraping()
devtools::load_all(".")
df = QuandooScraping()
View(df)
remove.packages("genderdata")
df2 <- QuandooScraping()
QuandooScraping()
devtools::load_all(".")
library(QuandooScraping)
QuandooScraping()
library(QuandooScraping)
df2 <- QuandooScraping()
View(df2)
devtools::install_github("lmullen/genderdata")
library(genderdata)
df_mit <- QuandooScraping()
View(df_mit)
devtools::load_all(".")
remove.packages("genderdata")
library(QuandooScraping)
df_1 <- QuandooScraping()
devtools::install_github("lmullen/genderdata")
View(df_1)
df2 <- QuandooScraping()
View(df2)
View(df_1)
devtools::load_all(".")
devtools::load_all(".")
review_df <- QuandooScraping(url="https://www.quandoo.ch/en/place/yens-restaurant-11833")
View(review_df)
is.na(review_df$review_count)
any(is.na(review_df$review_count))
review_example <- review_df
use_data("review_example")
library(devtools)
use_data("review_example")
use_data("review_example")
review_example
use_data(review_example)
devtools::load_all(".")
library(QuandooScraping)
load(review_example)
data(review_example)
devtools::load_all(".")
library(QuandooScraping)
devtools::load_all(".")
library(QuandooScraping)
data("review_example")
?review_example
df = QuandooScraping()
